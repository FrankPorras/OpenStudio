/***********************************************************************************************************************
*  OpenStudio(R), Copyright (c) 2008-2020, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
*  following conditions are met:
*
*  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
*  disclaimer.
*
*  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
*  disclaimer in the documentation and/or other materials provided with the distribution.
*
*  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
*  derived from this software without specific prior written permission from the respective party.
*
*  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
*  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
*  written permission from Alliance for Sustainable Energy, LLC.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
*  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
*  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
*  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
*  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
*  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
***********************************************************************************************************************/

#include "IddRegex.hpp"
#include "../core/Regex.hpp"
#include "../core/RegexBuilders.hpp"
#include <ctre.hpp>

namespace openstudio{
namespace iddRegex{

  /// name of the comment only object automatically added to the idd
  const std::string &commentOnlyObjectName(){
    static const std::string result("CommentOnly");
    return result;
  }

  /// text of the comment only object automatically added to the idd
  const std::string &commentOnlyObjectText(){
    static const std::string result("CommentOnly; ! Autogenerated comment only object.");
    return result;
  }




  /// Search for IDD version in line
  /// matches[1], version identifier
  static constexpr auto version_regex = ctll::fixed_string{"^!IDD_Version (\\S+)"};
  const Regex &version(){
    static constexpr auto regex = make_regex<version_regex>();
    return regex;
  }

  /// Search for IDD build in line
  /// matches[1], build identifier
  static constexpr auto build_regex = ctll::fixed_string{"^!IDD_BUILD (\\S+)"};
  const Regex &build(){
    static constexpr auto regex = make_regex<build_regex>();
    return regex;
  }

  /// Search for IDD header, each line must start with '!', no preceding whitespace
  /// matches[1], header
  static constexpr auto header_regex = ctll::fixed_string{"^(^!.*?^[^!])"};
  const Regex &header(){
    static constexpr auto regex = make_regex<header_regex>();
    return regex;
  }

  /// Match comment only line
  /// matches[1], comment
  static constexpr auto commentOnlyLine_regex = ctll::fixed_string{"^[\\s\\t]*[!](.*)"};
  const Regex &commentOnlyLine(){
    static constexpr auto regex = make_regex<commentOnlyLine_regex>();
    return regex;
  }

  /// Match content then comment
  /// matches[1], content
  /// matches[2], comment if any
  static constexpr auto contentAndCommentLine_regex = ctll::fixed_string{"^([^!]*)[!]?(.*)"};
  const Regex &contentAndCommentLine(){
    static constexpr auto regex = make_regex<contentAndCommentLine_regex>();
    return regex;
  }

  /// Match group identifier
  /// matches[1], group name
  static constexpr auto group_regex = ctll::fixed_string{"^[\\\\][gG]roup(.*)"};
  const Regex &group(){
    static constexpr auto regex = make_regex<group_regex>();
    return regex;
  }

  /// Match include-file identifier
  /// matches[1], included Idd file name
  static constexpr auto includeFile_regex = ctll::fixed_string{"^[\\\\][iI]nclude-[fF]ile(.*)"};
  const Regex &includeFile() {
    static constexpr auto regex = make_regex<includeFile_regex>();
    return regex;
  }

  /// Match remove-object identifier
  /// matches[1], object in included Idd file that should not be included in this file
  static constexpr auto removeObject_regex = ctll::fixed_string{"^[\\\\][rR]emove-[oO]bject(.*)"};
  const Regex &removeObject() {
    static constexpr auto regex = make_regex<removeObject_regex>();
    return regex;
  }

  /// Match line with either a ',' or a ';' that are not preceded by '!'
  /// matches[1], before separator
  /// matches[2], after separator
  static constexpr auto line_regex = ctll::fixed_string{"^([^!]*?)[,;](.*)"};
  const Regex &line(){
    static constexpr auto regex = make_regex<line_regex>();
    return regex;
  }

  /// Match an object memo property
  /// matches[1], memo text
  static constexpr auto memoProperty_regex = ctll::fixed_string{"^[mM]emo(.*)"};
  const Regex &memoProperty(){
    static constexpr auto regex = make_regex<memoProperty_regex>();
    return regex;
  }

  /// Match an object note property
  /// matches[1], note text
  static constexpr auto noteProperty_regex = ctll::fixed_string{"^[nN]ote(.*)"};
  const Regex &noteProperty(){
    static constexpr auto regex = make_regex<noteProperty_regex>();
    return regex;
  }

  /// Match an object with no fields in the idd
  /// matches[1], before separator
  /// matches[2], after separator
  static constexpr auto objectNoFields_regex = ctll::fixed_string{"^([^!^,]*?)[;](.*)"};
  const Regex &objectNoFields(){
    static constexpr auto regex = make_regex<objectNoFields_regex>();
    return regex;
  }

  /// Match an object with one or more fields in the idd
  /// matches[1], object text
  /// matches[2], field(s) text
  static constexpr auto objectAndFields_regex = ctll::fixed_string{"^(.*?[,].*?)([AN][0-9]+[\\s\\t]*[,;].*)"};
  const Regex &objectAndFields(){
    static constexpr auto regex = make_regex<objectAndFields_regex>();
    return regex;
  }

  /// Match an object unique property
  static constexpr auto uniqueProperty_regex = ctll::fixed_string{"^[uU]nique-[oO]bject"};
  const Regex &uniqueProperty(){
    static constexpr auto regex = make_regex<uniqueProperty_regex>();
    return regex;
  }

  /// Match an object required property
  static constexpr auto requiredObjectProperty_regex = ctll::fixed_string{"^[rR]equired-[oO]bject"};
  const Regex &requiredObjectProperty(){
    static constexpr auto regex = make_regex<requiredObjectProperty_regex>();
    return regex;
  }

  /// Match an object obsolete property
  /// matches[1], reason for obsolete
  static constexpr auto obsoleteProperty_regex = ctll::fixed_string{"^[oO]bsolete(.*)"};
  const Regex &obsoleteProperty(){
    static constexpr auto regex = make_regex<obsoleteProperty_regex>();
    return regex;
  }

  static constexpr auto hasurlProperty_regex = ctll::fixed_string{"^(URL-[Oo]bject|url-[Oo]bject)"};
  const Regex &hasurlProperty()
  {
    static constexpr auto regex = make_regex<hasurlProperty_regex>();
    return regex;
  }

  /// Match an object extensible property
  /// matches[1], number of last fields to extend
  static constexpr auto extensibleProperty_regex = ctll::fixed_string{R"(^[eE]xtensible[\s\t]*:[\s\t]*([1-9][0-9]*))"};
  const Regex &extensibleProperty(){
    static constexpr auto regex = make_regex<extensibleProperty_regex>();
    return regex;
  }

  /// Match an object format property
  /// matches[1], format text
  static constexpr auto formatProperty_regex = ctll::fixed_string{"^[fF]ormat([^!]*)"};
  const Regex &formatProperty(){
    static constexpr auto regex = make_regex<formatProperty_regex>();
    return regex;
  }

  /// Match an object min fields property
  /// matches[1], min number of fields
  static constexpr auto minFieldsProperty_regex = ctll::fixed_string{"^[mM]in-[fF]ields[\\s\\t]*([0-9]+)"};
  const Regex &minFieldsProperty(){
    static constexpr auto regex = make_regex<minFieldsProperty_regex>();
    return regex;
  }

  static constexpr auto maxFieldsProperty_regex = ctll::fixed_string{"^[mM]ax-[fF]ields[\\s\\t]*([0-9]+)"};
  const Regex &maxFieldsProperty() {
    static constexpr auto regex = make_regex<maxFieldsProperty_regex>();
    return regex;
  }

  /// Match a field declaration in the idd
  /// A or N, then one or more numbers then white space and then a ',' or ';'
  /// matches[1], alpha or numeric indicator
  /// matches[2], alpha or numeric number
  /// matches[3], after separator
  static constexpr auto field_regex = ctll::fixed_string{R"(^[\s\t]*?([AN])([0-9]+)[\s\t]*[,;](.*))"};
  const Regex &field(){
    static constexpr auto regex = make_regex<field_regex>();
    return regex;
  }

  /// Match the closing field in an idd object
  /// matches[1], all previous text
  /// matches[2], the last field
  static constexpr auto closingField_regex = ctll::fixed_string{"(.*)([AN][0-9]+[\\s\\t]*[;].*?)$"};
  const Regex &closingField(){
    static constexpr auto regex = make_regex<closingField_regex>();
    return regex;
  }

  /// Match the last field declaration in a string, may or may not be the closing field
  /// matches[1], all previous text
  /// matches[2], the last field
  static constexpr auto lastField_regex = ctll::fixed_string{"^.*([AN][0-9]+\\s*[,;].*)$"};
  const Regex &lastField(){
    static constexpr auto regex = make_regex<lastField_regex>();
    return regex;
  }

  /// Match a field name
  /// matches[1], the field name
  static constexpr auto name_regex = ctll::fixed_string{R"([\\][fF]ield([^\\^!]*))"};
  const Regex &name(){
    static constexpr auto regex = make_regex<name_regex>();
    return regex;
  }

  /// Match a field field name property
  /// matches[1], the field name
  static constexpr auto nameProperty_regex = ctll::fixed_string{"^[fF]ield([^!]*)"};
  const Regex &nameProperty(){
    static constexpr auto regex = make_regex<nameProperty_regex>();
    return regex;
  }

  /// Match a field required property
  static constexpr auto requiredFieldProperty_regex = ctll::fixed_string{"^[rR]equired-[fF]ield"};
  const Regex &requiredFieldProperty(){
    static constexpr auto regex = make_regex<requiredFieldProperty_regex>();
    return regex;
  }

  /// Match a field autosizable property
  static constexpr auto autosizableProperty_regex = ctll::fixed_string{"^[aA]utosizable"};
  const Regex &autosizableProperty(){
    static constexpr auto regex = make_regex<autosizableProperty_regex>();
    return regex;
  }

  /// Match a field autocalculatable property
  static constexpr auto autocalculatableProperty_regex = ctll::fixed_string{"^[aA]utocalculatable"};
  const Regex &autocalculatableProperty(){
    static constexpr auto regex = make_regex<autocalculatableProperty_regex>();
    return regex;
  }

  /// Match a field retaincase property
  static constexpr auto retaincaseProperty_regex = ctll::fixed_string{"^[rR]etaincase"};
  const Regex &retaincaseProperty(){
    static constexpr auto regex = make_regex<retaincaseProperty_regex>();
    return regex;
  }

  /// Match a field units property
  /// matches[1], the field units
  static constexpr auto unitsProperty_regex = ctll::fixed_string{"^[uU]nits([^!]*)"};
  const Regex &unitsProperty(){
    static constexpr auto regex = make_regex<unitsProperty_regex>();
    return regex;
  }

  /// Match a field ip units property
  /// matches[1], the field ip units
  static constexpr auto ipUnitsProperty_regex = ctll::fixed_string{"^[iI][pP]-[uU]nits([^!]*)"};
  const Regex &ipUnitsProperty(){
    static constexpr auto regex = make_regex<ipUnitsProperty_regex>();
    return regex;
  }

  /// Match a field exclusive minimum property
  /// matches[1], the field exclusive minimum
  static constexpr auto minExclusiveProperty_regex = ctll::fixed_string{"^[mM]inimum[\\s\\t]*[>]([^!]*)"};
  const Regex &minExclusiveProperty(){
    static constexpr auto regex = make_regex<minExclusiveProperty_regex>();
    return regex;
  }

  /// Match a field inclusive minimum property
  /// matches[1], the field inclusive minimum
  static constexpr auto minInclusiveProperty_regex = ctll::fixed_string{"^[mM]inimum([^>!]*)"};
  const Regex &minInclusiveProperty(){
    static constexpr auto regex = make_regex<minInclusiveProperty_regex>();
    return regex;
  }

  /// Match a field exclusive maximum property
  /// matches[1], the field exclusive maximum
  static constexpr auto maxExclusiveProperty_regex = ctll::fixed_string{"^[mM]aximum[\\s\\t]*[<]([^!]*)"};
  const Regex &maxExclusiveProperty(){
    static constexpr auto regex = make_regex<maxExclusiveProperty_regex>();
    return regex;
  }

  /// Match a field inclusive maximum property
  /// matches[1], the field inclusive maximum
  static constexpr auto maxInclusiveProperty_regex = ctll::fixed_string{"^[mM]aximum([^<!]*)"};
  const Regex &maxInclusiveProperty(){
    static constexpr auto regex = make_regex<maxInclusiveProperty_regex>();
    return regex;
  }

  /// Match a field deprecated property
  /// matches[1], reason for deprecated
  static constexpr auto deprecatedProperty_regex = ctll::fixed_string{"^[dD]eprecated(.*)"};
  const Regex &deprecatedProperty(){
    static constexpr auto regex = make_regex<deprecatedProperty_regex>();
    return regex;
  }

  /// Match a field default property
  /// matches[1], default value
  static constexpr auto defaultProperty_regex = ctll::fixed_string{"^[dD]efault([^!]*)"};
  const Regex &defaultProperty(){
    static constexpr auto regex = make_regex<defaultProperty_regex>();
    return regex;
  }

  /// Match a field default property with either autocalculate or autosize
  static constexpr auto automaticDefault_regex = ctll::fixed_string{".*(autocalculate|autosize).*"};
  const Regex &automaticDefault(){
    static constexpr auto regex = make_regex<automaticDefault_regex>(true);
    return regex;
  }

  /// Match a field type property
  /// matches[1], type
  static constexpr auto typeProperty_regex = ctll::fixed_string{"^type[\\s\\t]*(integer|real|alpha|choice|node|object-list|external-list|url|handle)"};
  const Regex &typeProperty(){
    static constexpr auto regex = make_regex<typeProperty_regex>(true);
    return regex;
  }

  /// Match a field key property
  /// matches[1], key value
  static constexpr auto keyProperty_regex = ctll::fixed_string{"^[kK]ey(.*)"};
  const Regex &keyProperty(){
    static constexpr auto regex = make_regex<keyProperty_regex>();
    return regex;
  }

  /// Match a field object-list property
  /// matches[1], object-list value
  static constexpr auto objectListProperty_regex = ctll::fixed_string{"^[oO]bject-[lL]ist([^!]*)"};
  const Regex &objectListProperty(){
    static constexpr auto regex = make_regex<objectListProperty_regex>();
    return regex;
  }

  static constexpr auto externalListProperty_regex = ctll::fixed_string{"^[eE]xternal-[lL]ist([^!]*)"};
  const Regex &externalListProperty() {
    static constexpr auto regex = make_regex<externalListProperty_regex>();
    return regex;
  }

  /// Match a field reference property
  /// matches[1], reference value
  static constexpr auto referenceProperty_regex = ctll::fixed_string{"^[rR]eference([^!]*)"};
  const Regex &referenceProperty(){
    static constexpr auto regex = make_regex<referenceProperty_regex>();
    return regex;
  }

  /// Match a field reference-class-name property
  /// matches[1], reference-class-name value
  static constexpr auto referenceClassNameProperty_regex = ctll::fixed_string{"^[rR]eference-[cC]lass-[nN]ame([^!]*)"};
  const Regex & referenceClassNameProperty(){
    static constexpr auto regex = make_regex<referenceClassNameProperty_regex>();
    return regex;
  }

  /// Match begin extensible
  static constexpr auto beginExtensible_regex = ctll::fixed_string{"[\\\\][bB]egin-[eE]xtensible"};
  const Regex &beginExtensible(){
    static constexpr auto regex = make_regex<beginExtensible_regex>();
    return regex;
  }

  /// Match begin extensible
  static constexpr auto beginExtensibleProperty_regex = ctll::fixed_string{"^[bB]egin-[eE]xtensible"};
  const Regex &beginExtensibleProperty(){
    static constexpr auto regex = make_regex<beginExtensibleProperty_regex>();
    return regex;
  }

  /// Match a field or object level comment
  /// matches[1], after '\' until next '\'
  /// matches[2], after second '\' (may be empty)
  static constexpr auto metaDataComment_regex = ctll::fixed_string{R"(^[\s\t]*?[\\]([^\\]*)(.*))"};
  const Regex &metaDataComment(){
    static constexpr auto regex = make_regex<metaDataComment_regex>();
    return regex;
  }

  static constexpr auto versionObjectName_regex = ctll::fixed_string{".*[vV]ersion.*"};
  const Regex &versionObjectName() {
    static constexpr auto regex = make_regex<versionObjectName_regex>();
    return regex;
  }

} // iddRegex
} // openstudio

